<!DOCTYPE html>
<html class="no-js" lang="zh-CN">


<head>
        <link rel="canonical" href="https://mihomoparty.github.io/news/article-23998.htm" />
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <!-- Metas Page details-->
    <title>Java中数组的定义与使用(一)</title>
        <meta name="description" content="如果说现在要求你定义100个整型变量，那么如果按照之前的做法，可能现在定义的的结构如下： int i1, i2, i3, ... i100;  但是这个时候如果按照此类方式定义就会非常麻烦，因为这些变" />
        <link rel="icon" href="/assets/website/img/mihomoparty/favicon.ico" type="image/x-icon"/>
    <!-- Mobile Specific Meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!--main style-->
    <link rel="stylesheet" type="text/css" media="screen" href="/assets/website/css/mihomoparty/bootstrap.css">
    <link rel="stylesheet" type="text/css" media="screen" href="/assets/website/css/mihomoparty/main-style.css">
    <link rel="stylesheet" type="text/css" media="screen" href="/assets/website/css/mihomoparty/css3-animations.css">
    <link rel="stylesheet" type="text/css" media="screen" href="/assets/website/css/mihomoparty/responsive.css">
    <link type="text/css" rel="stylesheet" id="theme" href="/assets/website/css/mihomoparty/jquery-ui-1.8.16.custom.css">
    <link type="text/css" rel="stylesheet" href="/assets/website/css/mihomoparty/lightbox.min.css">
    <!-- Revolution slider css -->
    <link rel="stylesheet" href="/assets/website/css/mihomoparty/settings.css">
    <link rel="stylesheet" href="/assets/website/css/mihomoparty/revolution.css">
    <!-- Owl Carousel css -->
    <link href="/assets/website/css/mihomoparty/owl.carousel.css" rel="stylesheet">
    <link href="/assets/website/css/mihomoparty/owl.theme.css" rel="stylesheet">
    <link href="/assets/website/css/mihomoparty/owl.transitions.css" rel="stylesheet">
    <!-- font icon css style-->
    <link rel="stylesheet" href="/assets/website/css/mihomoparty/font-awesome.css">
    <link rel="stylesheet" href="/assets/website/css/mihomoparty/iconstyle.css">
    <!--google font style-->
    <link href='static/css/css.css' rel='stylesheet' type='text/css'>
    <!--font-family: Oswald;-->
    <link href='static/css/css1.css' rel='stylesheet' type='text/css'>
    <!--font-family: Open Sans, 'sans-serif';-->
    <link rel="stylesheet" type="text/css" media="screen" href="/assets/website/css/mihomoparty/panel.css">
    <!-- Style Switch -->
    <link rel="alternate stylesheet" type="text/css" media="screen" title="green" href="/assets/website/css/mihomoparty/color.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="lightblue" href="/assets/website/css/mihomoparty/color1.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="orange" href="/assets/website/css/mihomoparty/color2.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="yellow" href="/assets/website/css/mihomoparty/color3.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="red" href="/assets/website/css/mihomoparty/color4.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="color-5" href="/assets/website/css/mihomoparty/color5.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="color-6" href="/assets/website/css/mihomoparty/color6.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="color-7" href="/assets/website/css/mihomoparty/color7.css">
    <link rel="alternate stylesheet" type="text/css" media="screen" title="color-8" href="/assets/website/css/mihomoparty/color8.css">
    <!-- Style Switch -->
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-P3Y5HFGWW2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-P3Y5HFGWW2');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="top" class="ndhome" data-page="detail">
        <!-- PRELOADER-->
    <div id="preloader">
        <div class="preloader-container">
            <h4 class="preload-logo triggerAnimation animated" data-animate="fadeInLeft">NADEA</h4>
            <h4 class="back-logo">NADEA.</h4>
            <img src="/assets/website/img/mihomoparty/preloader.gif" class="preload-gif" alt="preload-image">
        </div>
    </div>
    <!-- END PRELOADER -->
    <!-- Header Section Start -->
    <header class="header headerStyle1" id="header">
        <div class="ndheader" id="ndheader">
            <div class="sticky scrollHeaderWrapper">
                <div class="container">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="logo pull-left">
                                <a class="navbar-brand" href="/">
                                                                        <span>Mihomo Party</span>
                                                                    </a>

                            </div>
                            <nav class="mainMenu mainNav pull-right" id="mainNav">
                                <ul class="navTabs">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li>
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li>
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                        <li>
                                        <a href="#">关于</a>
                                    </li>
                                    <li>
                                        <a href="#">联系</a>
                                    </li>
                                </ul><!-- end of nav tabs -->
                            </nav><!-- end of main nav -->
                            <a href="#" class="generalLink" id="responsiveMainNavToggler"><i class="fa fa-bars"></i></a>
                            <div class="clearfix"></div><!-- end of clearfix -->
                            <div class="responsiveMainNav"></div><!-- end of responsive main nav -->
                        </div><!-- end fo col 12 -->
                    </div><!-- end of row -->
                </div><!-- end of container -->
            </div><!-- end of sticky -->
        </div><!-- end of ndheader -->
    </header><!-- end of header -->
    <!-- Nadea PageTitle Section Start -->
    <section id="page-title" class="clear skype-bg" style="padding-top: 15rem;">
        <div class="container">
            <div class="row">
                <div class="col-sm-4">
                    
                </div><!-- col 6-->
                <div class="col-sm-8">
                    <div class="ndbreadcrumb">
                        <ul class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li class="active">正文</li>
                        </ul>
                    </div>
                </div><!-- col 6-->
            </div><!-- .row end -->
        </div><!-- .container end -->
    </section>
    <!-- Nadea PageTitle Section End -->
    <!-- Nadea Recent Work Start -->
    <section class="ndprotfolio clear" id="ndrecentwork">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <h1 style="font-size: 2.5rem;">Java中数组的定义与使用(一)</h1>
                                      				  				  				<div id="content_views" class="markdown_views prism-github-gist"> </h1> <p>如果说现在要求你定义100个整型变量，那么如果按照之前的做法，可能现在定义的的结构如下：</p> <pre><code>int i1, i2, i3, ... i100; </code></pre> <p>但是这个时候如果按照此类方式定义就会非常麻烦，因为这些变量彼此之间没有任何的关联，也就是说如果现在突然再有一个要求，要求你输出这100个变量的内容，意味着你要编写<code>System.out.println()</code>语句<code>100</code>次。</p> <p>其实所谓的数组指的就是一组相关类型的变量集合，并且这些变量可以按照统一的方式进行操作。数组本身属于引用数据类型，那么既然是引用数据类型，这里面实际又会牵扯到内存分配，而数组的定义语法有如下两类。</p> <ul> <li>数组动态初始化： <ul> <li>声明并开辟数组： <ul> <li>数据类型 [] 数组名称 = <code>new</code> 数据类型[长度];</li> <li>数据类型 [] 数组名称 = <code>new</code> 数据类型[长度];</li> </ul> </li> <li>分布进行数组空间开辟（实例化）<br /> | Tables | Are |<br /> | ------------- |:-------------?<br /> | 声明数组： | 数组类型 数组名称[] = <code>nu</code>ll<code>; | | | 数组类型 [] 数组名称 =</code>null<code>; | | 开辟数组空间： | 数组名称 =</code>new` 数组类型[长度]; |</li> </ul> </li> </ul> <p>那么当数组开辟空间之后，就可以采用如下的方式的操作：</p> <ul> <li>数组的访问通过索引完成，即：“数组名称[索引]”，但是需要注意的是，数组的索引从<code>0</code>开始，所以索引的范围就是<code>0</code> ~ 数组长度-<code>1</code>，例如开辟了<code>3</code>个空间的数组，所以可以使用的索引是：0,1,2，如果此时访问的时候超过了数组的索引范围，会产生<code>java.lang.ArrayIndexOutOfBoundsException</code> 异常信息；</li> <li>当我们数组采用动态初始化开辟空间后，数组里面的每一个元素都是该数组对应数据类型的默认值；</li> <li>数组本身是一个有序的集合操作，所以对于数组的内容操作往往会采用循环的模式完成，数组是一个有限的数据集合，所以应该使用 <code>for</code> 循环。</li> <li>在 <code>Java</code> 中提供有一种动态取得数组长度的方式：数组名称.length；</li> </ul> <p><strong>范例：</strong> 定义一个int型数组</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*开辟了一个长度为3的数组*/</span> 		data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 第一个元素</span> 		data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 第二个元素</span> 		data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// 第三个元素</span> 		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过循环控制索引</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>数组本身除了声明并开辟空间之外还有另外一种开辟模式。</p> <p><strong>范例：</strong> 采用分步的模式开辟数组空间</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>  		data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*开辟了一个长度为3的数组*/</span> 		data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 第一个元素</span> 		data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 第二个元素</span> 		data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// 第三个元素</span> 		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过循环控制索引</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>但是千万要记住，数组属于引用数据类型，所以在数组使用之前一定要开辟控件（实例化），如果使用了没有开辟空间的数组，则一定会出现 <code>NullPointerException</code> 异常信息：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>  		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>这一原则和之前讲解的对象是完全相同的。</p> <p>数组在开发之中一定会使用，但是像上面的操作很少。在以后的实际开发之中，会更多的使用数组概念，而直接使用，99%情况下都只是做一个 <code>for</code> 循环输出。</p> </h1> <p>既然数组属于引用数据类型，那么也一定可以发生引用传递。在这之前首先来研究一下数组的空间开辟。</p> <p><strong>范例：</strong> 观察一道程序</p> <pre><code class="prism language-Java">public class ArrayDemo { 	public static void main(String args[]) { 		int data[] = null; 		data = new int[3]; //开辟一个长度为3的数组 		data[0] = 10; 		data[1] = 20; 		data[2] = 30; 	} } </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230119/f41a8e16946a33f5f99bb91c7f5a78e4.jpg" alt="Java中数组的定义与使用(一)"></p> <p>那么既然说到了引用数据类型了，就一定可以发生引用传递，而现在的引用传递的本质也一定是：同一块堆内存空间可以被不同的栈内存所指向。</p> <p><strong>范例：</strong> 定义一个程序</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> 		data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//开辟一个长度为3的数组</span> 		<span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment">//声明对象</span> 		data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 		data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> 		data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> 		temp <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token comment">//int temp[] = data;</span> 		temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> 		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230119/9b0033b3febd30ef6bd76b96dc26ed75.jpg" alt="Java中数组的定义与使用(一)"></p> <p>引用传递分析都是一个套路。同一块堆内存被不同的栈内存所指向。</p> </h1> <p>在之前所进行的数组定义都有一个明显特点：数组先开辟内存空间，而后再使用索引进行内容的设置，实际上这种做法都叫做动态初始化，而如果希望数组在定义的时候可以同时出现设置内容，那么就可以采用静态初始化完成。</p> <p>数组的静态初始化一共分为以下两种类型：</p> <table> <thead> <tr> <th align="left">Tables</th> <th align="left">Are</th> </tr> </thead> <tbody> <tr> <td align="left">简化格式：</td> <td align="left">数据类型 数组名称 = {值, 值,…}</td> </tr> <tr> <td align="left">完整格式：</td> <td align="left">数据类型 数组名称 = new 数据类型[] {值, 值,…}</td> </tr> </tbody> </table> <p><strong>范例：</strong> 采用静态初始化定义数组</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">13131</span><span class="token punctuation">,</span> <span class="token number">4444</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>在开发之中，对于静态数组的初始化强烈建议使用完整语法模式，这样可以轻松地使用匿名数组这一概念。</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">13131</span><span class="token punctuation">,</span> <span class="token number">4444</span><span class="token punctuation">}</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>以后使用静态方式定义数组的时候一定要写上完整格式。</p> <p>数组最大的缺陷：长度固定。</p> </h1> <p>在之前所使用的数组发现只需要一个索引就可以进行访问，那么这样的数组实际上非常像一个数据行的概念。</p> <table> <thead> <tr> <th align="left">索引</th> <th>0</th> <th>1</th> <th>2</th> <th>3</th> <th>4</th> <th>5</th> <th>6</th> <th>7</th> <th>8</th> </tr> </thead> <tbody> <tr> <td align="left">内容</td> <td>12</td> <td>23</td> <td>44</td> <td>56</td> <td>90</td> <td>445</td> <td>49</td> <td>99</td> <td>1010</td> </tr> </tbody> </table> <p>现在痛过一个索引就可以取得唯一的一个记录。所以这样的数组可以简单理解为一维数组，而二维数组本质上指的是行列集合，也如果要确定某一个数据需要行索引和列索引来进行定位。</p> <table> <thead> <tr> <th align="center">索引</th> <th>0</th> <th>1</th> <th>2</th> <th>3</th> <th>4</th> <th>5</th> <th>6</th> <th>7</th> <th>8</th> </tr> </thead> <tbody> <tr> <td align="center">0</td> <td>12</td> <td>23</td> <td>44</td> <td>56</td> <td>90</td> <td>445</td> <td>49</td> <td>99</td> <td>1010</td> </tr> <tr> <td align="center">1</td> <td>2</td> <td>3</td> <td>41</td> <td>56</td> <td>9</td> <td>45</td> <td>49</td> <td>99</td> <td>10</td> </tr> </tbody> </table> <p>如果要想确定一个数据则数据使用的结构是“数组名称[行索引][列索引]”，所以这样的结构就是一个表的结构。</p> <p>那么对二维数组的定义有两种声明形式：</p> <ul> <li>数组的动态初始化：数据类型 对象数组[][] = new 数据类型[行个数][列个数];</li> <li>数组的静态初始化：数据类型 对象数组[][] = new 数据类型[行个数][列个数]{<!-- -->{值, 值,…}, {值, 值,…},…};</li> </ul> <p>数组的数组就是二维数组。</p> <p><strong>范例：</strong> 定义一个二维数组</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayDemo</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//此时的数组并不是一个等列数组</span> 		<span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{<!-- --></span> 			<span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{<!-- --></span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{<!-- --></span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 		<span class="token comment">//如果在进行输出的时候一定要使用双重循环，</span> 		<span class="token comment">//外部的循环控制输出的行数，而内部的循环控制输出列数</span> 		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"data["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]["</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"]="</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>由于输出麻烦，所以可以忽略了，在进行开发之中，出现二位数组的几率并不高。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-23534.htm">山东聊城宠物产业基地在哪里（聊城宠物店地址）</a></p>
                                        <p>下一个：<a href="/news/article-24000.htm">关于MySQL92和99 等值连接、非等值连接、自连接、外连接及多表查询的代码示例总结！</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-20796.htm" title="Spring JDBC-NamedParameterJdbcTemplate模板类">Spring JDBC-NamedParameterJdbcTemplate模板类</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-4-node-share.htm" title="Mihomo Party节点订阅每天更新19.5M/S免费节点订阅链接">Mihomo Party节点订阅每天更新19.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-free-node-subscribe.htm" title="Mihomo Party节点订阅每天更新19.2M/S免费节点订阅链接">Mihomo Party节点订阅每天更新19.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-28-free-node-subscribe-links.htm" title="Mihomo Party节点订阅每天更新20.8M/S免费节点订阅链接">Mihomo Party节点订阅每天更新20.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-node-share-links.htm" title="Mihomo Party节点订阅每天更新20.9M/S免费节点订阅链接">Mihomo Party节点订阅每天更新20.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-23087.htm" title="厦门动物领养中心地址 厦门动物领养中心地址在哪里">厦门动物领养中心地址 厦门动物领养中心地址在哪里</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-10-free-high-speed-nodes.htm" title="Mihomo Party节点订阅每天更新19.1M/S免费节点订阅链接">Mihomo Party节点订阅每天更新19.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-1-free-node-subscribe-links.htm" title="Mihomo Party节点订阅每天更新18.1M/S免费节点订阅链接">Mihomo Party节点订阅每天更新18.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24935.htm" title="瑞鹏宠物医院营业时间表（瑞鹏宠物医院营业时间表最新）">瑞鹏宠物医院营业时间表（瑞鹏宠物医院营业时间表最新）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-5-free-high-speed-nodes.htm" title="Mihomo Party节点订阅每天更新22.3M/S免费节点订阅链接">Mihomo Party节点订阅每天更新22.3M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">32</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div><!-- .row end -->
        </div><!-- .container end -->
    </section>
    <!--Recent Work End -->
        <!-- Footer Section Start -->
    <section class="footer-bg clear animation" data-animation="animation-fade-in-up" id="footer">
        <!-- Footer Bottom Start-->
        <div class="footer-bottom clear">
            <div class="container">
                <div class="row">
                    <div class="col-sm-6">
                        <ul class="footer-nav pull-left">
                            <li><a href="/">Home</a></li>
                            <li><a href="#">Features</a></li>
                            <li><a href="#">Portfolio</a></li>
                            <li><a href="#">Blog</a></li>
                            <li><a href="#">Contact</a></li>
                            <li><a href="#">Purchase</a></li>
                        </ul>
                    </div><!-- col 6 end -->
                    <div class="col-sm-6">
                        <p class="copywrite pull-right">
                            <a href="/">Mihomo Party免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div><!-- col 6 end -->
                </div><!-- row end -->
            </div><!-- container end -->
        </div><!-- Footer Bottom End -->
    </section><!-- footer section end  -->
    <div class="go-up"><img src="/assets/website/img/mihomoparty/back-top.png" alt="Back-To-Top"></div>
    <!-- Back To Top End-->
    <!-- Jquery lib-->
    <script src="/assets/website/js/frontend/mihomoparty/jquery.js"></script>
    <script src="/assets/website/js/frontend/mihomoparty/bootstrap.js"></script>
    <!-- JavaScript -->
    <script src="/assets/website/js/frontend/mihomoparty/jquery.appear.js"></script>
    <script src="/assets/website/js/frontend/mihomoparty/owl.carousel.min.js"></script>
    <!--for portfolio jquery-->
    <script src="/assets/website/js/frontend/mihomoparty/jquery.isotope.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/jquery.ui.widget.min.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/jquery.ui.rlightbox.js"></script>
    <script src="/assets/website/js/frontend/mihomoparty/jquery.themepunch.tools.min.js"></script>
    <script src="/assets/website/js/frontend/mihomoparty/jquery.themepunch.revolution.min.js"></script>
    <script type="text/javascript">
        $(function(){
            $('.banner').revolution({
            dottedOverlay: "none",
            delay: 9000,
            startwidth: 1500,
            startheight: 700,
            hideThumbs: 200,

            thumbWidth: 100,
            thumbHeight: 50,
            thumbAmount: 5,

            navigationType: "bullet",
            navigationArrows: "solo",
            navigationStyle: "preview3",


            navigationHAlign: "center", // Vertical Align top,center,bottom
            navigationVAlign: "bottom", // Horizontal Align left,center,right
            navigationHOffset: 0,
            navigationVOffset: 20,

            soloArrowLeftHalign: "left",
            soloArrowLeftValign: "center",
            soloArrowLeftHOffset: 20,
            soloArrowLeftVOffset: 0,

            soloArrowRightHalign: "right",
            soloArrowRightValign: "center",
            soloArrowRightHOffset: 20,
            soloArrowRightVOffset: 0,

            touchenabled: "off", // Enable Swipe Function : on/off
            onHoverStop: "off", // Stop Banner Timet at Hover on Slide on/off

            stopAtSlide: -1, // Stop Timer if Slide "x" has been Reached. If stopAfterLoops set to 0, then it stops already in the first Loop at slide X which defined. -1 means do not stop at any slide. stopAfterLoops has no sinn in this case.
            stopAfterLoops: -1, // Stop Timer if All slides has been played "x" times. IT will stop at THe slide which is defined via stopAtSlide:x, if set to -1 slide never stop automatic

            hideCaptionAtLimit: 0, // It Defines if a caption should be shown under a Screen Resolution ( Basod on The Width of Browser)
            hideAllCaptionAtLilmit: 0, // Hide all The Captions if Width of Browser is less then this value
            hideSliderAtLimit: 0, // Hide the whole slider, and stop also functions if Width of Browser is less than this value

            shadow: 0, //0 = no Shadow, 1,2,3 = 3 Different Art of Shadows  (No Shadow in Fullwidth Version !)
            fullWidth: "on" // Turns On or Off the Fullwidth Image Centering in FullWidth Modus


        });
        })
    </script>
    
    <!--Main Js -->
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/nice-scroll.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/ms-drop-down.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/easy-tabs.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/styleswitch.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/mihomoparty/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>